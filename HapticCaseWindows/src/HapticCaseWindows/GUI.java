package HapticCaseWindows;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GUI.java
 *
 * Created on 25-Dec-2010, 3:20:45 PM
 */

import java.awt.BorderLayout;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.text.DefaultCaret;

public class GUI extends javax.swing.JFrame implements Runnable {

	// object for selecting my sensors
	SensorSelectorClass sensorSelector = null;

	// Communicator object
	Communicator communicator = null;

	Thread guiUpdater = null;

	/** Creates new form GUI */
	public GUI() {
		sensorSelector.mainHere();
		// Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
		initComponents();
		createObjects();

		guiUpdater = new Thread(this);
		communicator.searchForPorts();

		this.addWindowListener(new java.awt.event.WindowAdapter() {
			@Override
			public void windowClosing(java.awt.event.WindowEvent windowEvent) {
				// Component frame = null;
				// setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
				// if (JOptionPane.showConfirmDialog(frame,
				// "Are you sure to close this window?", "Really Closing?",
				// JOptionPane.YES_NO_OPTION,
				// JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION){
				// communicator.setReadingFlag(false);
				if (communicator.getConnected())
					communicator.disconnect();
				System.exit(0);
				// }
			}
		});
		// toggleAllControls();
		pack();
	}

	public void toggleSensorControls() {
		if (!increaseSensor.isEnabled()) {
			increaseSensor.setEnabled(true);
			decreaseSensor.setEnabled(true);
		} else {
			increaseSensor.setEnabled(false);
			decreaseSensor.setEnabled(false);
		}
	}

	public void toggleAllControls() {
		// sensorSelector.toggleSensorButtons();
		if (communicator.getConnected() == true) {
			btnLeftAccel.setEnabled(true);
			btnLeftDecel.setEnabled(true);
			increaseSensor.setEnabled(true);
			decreaseSensor.setEnabled(true);

			btnDisconnect.setEnabled(true);
			btnConnect.setEnabled(false);
			cboxPorts.setEnabled(false);
		} else {
			btnLeftAccel.setEnabled(false);
			btnLeftDecel.setEnabled(false);
			increaseSensor.setEnabled(false);
			decreaseSensor.setEnabled(false);

			btnDisconnect.setEnabled(false);
			btnConnect.setEnabled(true);
			cboxPorts.setEnabled(true);
		}
	}

	private void createObjects() {
		communicator = new Communicator(this, sensorSelector);
		sensorSelector = new SensorSelectorClass(this, communicator);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		jTextArea1 = new javax.swing.JTextArea();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		sensorNumberLabel = new javax.swing.JLabel();
		jLabels4a = new javax.swing.JLabel();
		btnLeftAccel = new javax.swing.JButton();
		btnLeftDecel = new javax.swing.JButton();
		increaseSensor = new javax.swing.JButton();
		jLabels4b = new javax.swing.JLabel();
		decreaseSensor = new javax.swing.JButton();
		cboxPorts = new javax.swing.JComboBox();
		jLabel5 = new javax.swing.JLabel();
		btnConnect = new javax.swing.JButton();
		btnDisconnect = new javax.swing.JButton();
		jLabel6 = new javax.swing.JLabel();
		jLabels1a = new javax.swing.JLabel();
		jLabels1b = new javax.swing.JLabel();
		jLabels2a = new javax.swing.JLabel();
		jLabels2b = new javax.swing.JLabel();
		jLabels3a = new javax.swing.JLabel();
		jLabels3b = new javax.swing.JLabel();
		jLabel13 = new javax.swing.JLabel();
		jScrollPane2 = new javax.swing.JScrollPane();
		txtLog = new javax.swing.JTextArea();

		jTextArea1.setColumns(20);
		jTextArea1.setRows(5);
		jScrollPane1.setViewportView(jTextArea1);

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Haptic Feedback Case Debug Software");

		jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14));
		jLabel1.setText("Haptic Feedback Case Debug Software");

		jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
		jLabel2.setText("Throttle");

		jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel3.setText("Left");

		sensorNumberLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		// jLabel4.setText(Integer.toString(communicator.getSensors()));

		jLabels4a.setFont(new java.awt.Font("Tahoma", 1, 18));
		jLabels4a.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

		btnLeftAccel.setText("/\\");
		btnLeftAccel.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnLeftAccelActionPerformed(evt);
			}
		});

		btnLeftDecel.setText("\\/");
		btnLeftDecel.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnLeftDecelActionPerformed(evt);
			}
		});

		increaseSensor.setText("/\\");
		increaseSensor.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				performIncreaseSensor(evt);
			}
		});

		jLabels4b.setFont(new java.awt.Font("Tahoma", 1, 18));
		jLabels4b.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		// lblRight.setText("0");

		decreaseSensor.setText("\\/");
		decreaseSensor.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				performDecreaseSensor(evt);
			}
		});

		jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11));
		jLabel5.setText("Select the COM Port");

		btnConnect.setText("Connect");
		btnConnect.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnConnectActionPerformed(evt);
			}
		});

		btnDisconnect.setText("Disconnect");
		btnDisconnect.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				try {
					btnDisconnectActionPerformed(evt);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		});

		jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11));
		jLabel6.setText("Controls");

		jLabels1a.setText("Q - Accelerate Left");

		jLabels1b.setText("A - Decelerate Left");

		jLabels2a.setText("W - Accelerate Both");

		jLabels2b.setText("S - Decelerate Both");

		jLabels3a.setText("D - Decelerate Right");

		jLabels3b.setText("E - Accelerate Right");

		jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11));
		jLabel13.setText("Log");

		DefaultCaret caret = (DefaultCaret) txtLog.getCaret();

		txtLog.setColumns(20);
		txtLog.setEditable(false);
		txtLog.setLineWrap(true);
		txtLog.setRows(5);
		txtLog.setFocusable(false);
		jScrollPane2.setViewportView(txtLog);

		caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup().addContainerGap()
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel1)
						.addGroup(layout.createSequentialGroup()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(layout.createSequentialGroup()
												.addComponent(cboxPorts, javax.swing.GroupLayout.PREFERRED_SIZE, 69,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(btnConnect)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(btnDisconnect))
										.addComponent(jLabel5).addComponent(jLabel2)
										.addGroup(layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
												.addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout
														.createSequentialGroup()
														.addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE,
																37, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
														.addComponent(sensorNumberLabel,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
												.addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout
														.createSequentialGroup()
														.addGroup(layout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.LEADING)
																.addComponent(btnLeftDecel)
																.addGroup(layout
																		.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.TRAILING,
																				false)
																		.addComponent(jLabels4a,
																				javax.swing.GroupLayout.Alignment.LEADING,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				Short.MAX_VALUE)
																		.addComponent(btnLeftAccel,
																				javax.swing.GroupLayout.Alignment.LEADING)))
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addGroup(layout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.LEADING)
																.addComponent(decreaseSensor)
																.addGroup(layout
																		.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.TRAILING,
																				false)
																		.addComponent(jLabels4b,
																				javax.swing.GroupLayout.Alignment.LEADING,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				Short.MAX_VALUE)
																		.addComponent(increaseSensor,
																				javax.swing.GroupLayout.Alignment.LEADING)))))
										.addComponent(jLabel6).addGroup(
												layout.createSequentialGroup()
														.addGroup(layout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.LEADING)
																.addComponent(jLabels1b).addComponent(jLabels1a))
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addGroup(layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(jLabels2b).addComponent(jLabels2a))
												.addGap(3, 3, 3)
												.addGroup(layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(jLabels3a).addComponent(jLabels3b))))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jLabel13).addComponent(jScrollPane2,
												javax.swing.GroupLayout.PREFERRED_SIZE, 333,
												javax.swing.GroupLayout.PREFERRED_SIZE))))
				.addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap().addComponent(jLabel1)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel5).addComponent(jLabel13))
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
						.addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
						.addGroup(layout.createSequentialGroup().addGroup(layout
								.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(cboxPorts, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(btnConnect).addComponent(btnDisconnect))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jLabel2)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jLabel3).addComponent(sensorNumberLabel))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(layout.createSequentialGroup().addComponent(btnLeftAccel)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(jLabels4a)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(btnLeftDecel)).addGroup(
														layout.createSequentialGroup().addComponent(increaseSensor)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(jLabels4b)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(decreaseSensor)))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jLabel6)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(
										layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(layout.createSequentialGroup().addComponent(jLabels3b)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addComponent(jLabels3a))
												.addGroup(layout.createSequentialGroup().addComponent(jLabels1a)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addComponent(jLabels1b))
												.addGroup(layout.createSequentialGroup().addComponent(jLabels2a)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addComponent(jLabels2b)))))
				.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void btnLeftAccelActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnLeftAccelActionPerformed

	}// GEN-LAST:event_btnLeftAccelActionPerformed

	private void btnLeftDecelActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnLeftDecelActionPerformed
		System.out.println(communicator.consumerThread.isAlive());
		System.out.println(communicator.getConnected());
		System.out.println(communicator.getSensors());
		System.out.println(guiUpdater.isAlive());
		System.out.println(communicator.isConsuming);
	}// GEN-LAST:event_btnLeftDecelActionPerformed

	private void performIncreaseSensor(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnRightAccelActionPerformed

	}// GEN-LAST:event_btnRightAccelActionPerformed

	private void performDecreaseSensor(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnRightDecelActionPerformed

	}// GEN-LAST:event_btnRightDecelActionPerformed

	private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnConnectActionPerformed
		if (!communicator.isConsuming) {
			communicator.connect();
			if (communicator.getConnected() == true) {
				if (communicator.initIOStream() == true) {
					
					communicator.setReadingFlag(true);
					communicator.consumerThread.start();
					guiUpdater.start();
					communicator.initListener();
				}
			}
		} else {
			System.out.println("fuck");
			communicator.connect();
			if (communicator.getConnected() == true) {
				System.out.println("fuck1");
				if (communicator.initIOStream() == true) {
					System.out.println("fuck2");
					communicator.initListener();
					synchronized (communicator.consumerThread) {
						communicator.consumerThread.notify();
					}
					System.out.println("fuck3");
					synchronized (guiUpdater) {
						guiUpdater.notify();
					}
					System.out.println("fuck4");
				}

			}
			pack();
		}
	}// GEN-LAST:event_btnConnectActionPerformed

	private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt) throws InterruptedException {// GEN-FIRST:event_btnDisconnectActionPerformed
		communicator.disconnect();
		communicator.halt = true;

	

	}// GEN-LAST:event_btnDisconnectActionPerformed

	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new GUI().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	public javax.swing.JButton btnConnect;
	public javax.swing.JButton btnDisconnect;
	public javax.swing.JButton btnLeftAccel;
	public javax.swing.JButton btnLeftDecel;
	public javax.swing.JButton increaseSensor;
	public javax.swing.JButton decreaseSensor;
	public javax.swing.JComboBox cboxPorts;
	private javax.swing.JLabel jLabel1;

	private javax.swing.JLabel jLabel13;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	public javax.swing.JLabel sensorNumberLabel;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;

	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JTextArea jTextArea1;
	public javax.swing.JLabel jLabels1a;
	public javax.swing.JLabel jLabels1b;
	public javax.swing.JLabel jLabels2a;
	public javax.swing.JLabel jLabels2b;
	public javax.swing.JLabel jLabels3a;
	public javax.swing.JLabel jLabels3b;
	public javax.swing.JLabel jLabels4a;
	public javax.swing.JLabel jLabels4b;
	public javax.swing.JTextArea txtLog;
	// End of variables declaration//GEN-END:variables

	@Override
	public void run() {
		while (communicator.isConsuming) {
			System.out.println("i'm cons in gui"+ (new Random(10)));
			if (communicator.halt) // NOT DEBUG
				try {
					synchronized (guiUpdater) {
						guiUpdater.wait();
					}
				} catch (InterruptedException e1) {
					e1.printStackTrace();
				}
			if (!communicator.isAsleep) { // DEBUG
				try {
					Thread.sleep(100);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}

				// // s1
				// jLabels1a.setText(Integer.toString(communicator.getCurrentSideSensor(0,
				// 0)));
				// jLabels1b.setText(Integer.toString(communicator.getCurrentSideSensor(0,
				// 1)));
				// // s2
				// jLabels2a.setText(Integer.toString(communicator.getCurrentSideSensor(1,
				// 0)));
				// jLabels2b.setText(Integer.toString(communicator.getCurrentSideSensor(1,
				// 1)));
				// // s3
				// jLabels3a.setText(Integer.toString(communicator.getCurrentSideSensor(2,
				// 0)));
				// jLabels3b.setText(Integer.toString(communicator.getCurrentSideSensor(2,
				// 1)));
				// // s4
				// jLabels4a.setText(Integer.toString(communicator.getCurrentSideSensor(3,
				// 0)));
				// jLabels4b.setText(Integer.toString(communicator.getCurrentSideSensor(3,
				// 1)));
				// // XYZ
				// if (communicator.inXYZ){ // if we're in the xyz
				// for (int i = 0; i < communicator.modelState.ROWS; i++) {
				// for (int j = 0; j < communicator.modelState.COLS; j++) {
				// int temp = communicator.getCurrentXYZ(i, j);
				// //if (temp != 0)
				//
				// }
				// }
				// }

				// DEBUGGER ONLY I.E. TO SYSOUT

				// for (int i = 0; i < communicator.activeSensors.size(); i++) {
				// System.out.println(communicator.activeSensors.get(i).toString());
				// }
				// try {
				// Thread.sleep(500);
				// } catch (InterruptedException e) {
				// // TODO Auto-generated catch block
				// e.printStackTrace();
				// }

				// s1
				if (communicator.inSensorQuery(communicator.currentSensor.IN_STRIP_1))
					System.out.println("s1: " + communicator.getCurrentSideSensor(0, 0) + " "
							+ communicator.getCurrentSideSensor(0, 1));
				// s2
				if (communicator.inSensorQuery(communicator.currentSensor.IN_STRIP_2))
					System.out.println("	s2: " + communicator.getCurrentSideSensor(1, 0) + " "
							+ communicator.getCurrentSideSensor(1, 1));
				// s3
				if (communicator.inSensorQuery(communicator.currentSensor.IN_STRIP_3))
					System.out.println("		s3: " + communicator.getCurrentSideSensor(2, 0) + " "
							+ communicator.getCurrentSideSensor(2, 1));
				// s4
				if (communicator.inSensorQuery(communicator.currentSensor.IN_STRIP_4))
					System.out.println("			s4: " + communicator.getCurrentSideSensor(3, 0) + " "
							+ communicator.getCurrentSideSensor(3, 1));
				// XYZ
				if (communicator.inSensorQuery(communicator.currentSensor.IN_XYZ)) { // if
																						// we're
																						// in
																						// the
																						// xyz
					for (int i = 0; i < communicator.modelState.ROWS; i++) {
						for (int j = 0; j < communicator.modelState.COLS; j++) {
							int temp = communicator.getCurrentXYZ(i, j);
							if (temp < 10) {
								System.out.print("  ");
							} else if (temp < 100) {
								System.out.print(" ");
							}
							System.out.print(temp + " ");
						}
						System.out.println();
					}
				}
				System.out.println();

				// DEBUG end

			}
		}
	}
}
