package HapticCaseWindows;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.Color;

import javax.swing.text.DefaultCaret;

@SuppressWarnings("serial")
public class ConnectorGUI extends javax.swing.JFrame implements Runnable {

	/*
	 * GLOBALS
	 */
	public javax.swing.JButton btnConnect;
	public javax.swing.JButton btnDisconnect;
	public javax.swing.JButton btnShowSensorSelectorPane;
	public javax.swing.JButton btnDebug;
	public javax.swing.JButton btnShowVisualGui;
	public javax.swing.JButton btnShowDataGui;
	@SuppressWarnings("rawtypes")
	public javax.swing.JComboBox cboxPorts;
	private javax.swing.JLabel controlPanelLabel;
	private javax.swing.JLabel logNameLabel;
	public javax.swing.JLabel sensorNumberLabel;
	private javax.swing.JLabel comPortSelectLabel;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JTextArea jTextArea1;
	public javax.swing.JTextArea txtLog;
	// object for selecting my sensors
	SensorSelectorGUI sensorSelector = null;
	// Communicator object
	Communicator communicator = null;
	SensorOutputDataGUI datagui = null;
	SensorOutputVisualGUI visualgui = null;
	Thread guiUpdater = new Thread(this);

	/*
	 * CONSTRUCTOR
	 */
	public ConnectorGUI() {
		// Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
		initComponents();
		createObjects();
		setResizable(false);
		communicator.searchForPorts();
		setAlwaysOnTop(true);
		addWindowListener(new java.awt.event.WindowAdapter() {
			@Override
			public void windowClosing(java.awt.event.WindowEvent windowEvent) {
				if (communicator.getConnected())
					communicator.disconnect();
				System.exit(0);
			}
		});
		toggleAllControls();
		pack();
		sensorSelector.mainSensorSelectorGui(sensorSelector);
		datagui.numericGUImain(datagui);
		visualgui.visualGUImain(visualgui);
		for (int i = 0; i < 5; i++) {
			datagui.toggleReadingFont(i, sensorSelector.sensorState[i]);
		}
	}

	private void createObjects() {
		communicator = new Communicator(this);
		sensorSelector = new SensorSelectorGUI(this, communicator);
		datagui = new SensorOutputDataGUI(this);
		visualgui = new SensorOutputVisualGUI(this);
	}

	public void toggleAllControls() {
		// sensorSelector.toggleSensorButtons();
		if (communicator.getConnected() == true) {
			btnDisconnect.setEnabled(true);
			btnConnect.setEnabled(false);
			cboxPorts.setEnabled(false);
		} else {
			btnDisconnect.setEnabled(false);
			btnConnect.setEnabled(true);
			cboxPorts.setEnabled(true);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	@SuppressWarnings("rawtypes")
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		jTextArea1 = new javax.swing.JTextArea();
		controlPanelLabel = new javax.swing.JLabel();

		sensorNumberLabel = new javax.swing.JLabel();
	
		btnShowSensorSelectorPane = new javax.swing.JButton();
		btnDebug = new javax.swing.JButton();
		btnShowVisualGui = new javax.swing.JButton();
btnShowDataGui = new javax.swing.JButton();
		cboxPorts = new javax.swing.JComboBox();
		comPortSelectLabel = new javax.swing.JLabel();
		btnConnect = new javax.swing.JButton();
		btnDisconnect = new javax.swing.JButton();

		logNameLabel = new javax.swing.JLabel();
		jScrollPane2 = new javax.swing.JScrollPane();
		txtLog = new javax.swing.JTextArea();

		jTextArea1.setColumns(20);
		jTextArea1.setRows(5);
		jScrollPane1.setViewportView(jTextArea1);

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Haptic Feedback Case Control Panel");

		controlPanelLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
		controlPanelLabel.setText("Haptic Feedback Case Control Panel");

		sensorNumberLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		// jLabel4.setText(Integer.toString(communicator.getSensors()));

		btnShowSensorSelectorPane.setEnabled(false);
		btnShowSensorSelectorPane.setText("Show Sensor Selector");
		btnShowSensorSelectorPane.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				performSensorSelectorGUI(evt);
			}
		});

		btnDebug.setText("Debug");
		btnDebug.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				performDebugBtn(evt);
			}
		});

		btnShowVisualGui.setEnabled(false);
		btnShowVisualGui.setText("Show Visual GUI");
		btnShowVisualGui.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				performTogVisualGUI(evt);
			}
		});

		btnShowDataGui.setEnabled(false);
		btnShowDataGui.setText("Show Numeric Data");
		btnShowDataGui.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				performTogDataGUI(evt);
			}
		});

		comPortSelectLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
		comPortSelectLabel.setText("Select the COM Port");

		btnConnect.setText("Connect");
		btnConnect.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnConnectActionPerformed(evt);
			}
		});

		btnDisconnect.setText("Disconnect");
		btnDisconnect.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				try {
					btnDisconnectActionPerformed(evt);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		});

		logNameLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
		logNameLabel.setText("Log");

		DefaultCaret caret = (DefaultCaret) txtLog.getCaret();

		txtLog.setColumns(20);
		txtLog.setEditable(false);
		txtLog.setLineWrap(true);
		txtLog.setRows(5);
		txtLog.setFocusable(false);
		jScrollPane2.setViewportView(txtLog);

		caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup().addContainerGap()
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(controlPanelLabel)
						.addGroup(layout.createSequentialGroup()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(layout.createSequentialGroup()
												.addComponent(cboxPorts, javax.swing.GroupLayout.PREFERRED_SIZE, 69,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(btnConnect)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(btnDisconnect))
										.addComponent(comPortSelectLabel)
//										.addComponent(jLabel2)
										.addGroup(layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
												.addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout
														.createSequentialGroup()
//														.addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE,
//																37, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
														.addComponent(sensorNumberLabel,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
												.addGroup(javax.swing.GroupLayout.Alignment.LEADING,
														layout.createSequentialGroup().addGroup(layout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.LEADING)
																.addComponent(btnDebug)
																.addGroup(layout
																		.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.TRAILING,
																				false)
//																		.addComponent(jLabels4a,
//																				javax.swing.GroupLayout.Alignment.LEADING,
//																				javax.swing.GroupLayout.DEFAULT_SIZE,
//																				javax.swing.GroupLayout.DEFAULT_SIZE,
//																				Short.MAX_VALUE)
																		.addComponent(btnShowSensorSelectorPane,
																				javax.swing.GroupLayout.Alignment.LEADING)))
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addGroup(layout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.LEADING)
																.addComponent(btnShowDataGui)
																.addGroup(layout
																		.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.TRAILING,
																				false)
//																		.addComponent(jLabels4b,
//																				javax.swing.GroupLayout.Alignment.LEADING,
//																				javax.swing.GroupLayout.DEFAULT_SIZE,
//																				javax.swing.GroupLayout.DEFAULT_SIZE,
//																				Short.MAX_VALUE)
																		.addComponent(btnShowVisualGui,
																				javax.swing.GroupLayout.Alignment.LEADING)))))
//										.addComponent(jLabel6)
										.addGroup(
												layout.createSequentialGroup()
														.addGroup(layout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.LEADING)
//																.addComponent(jLabels1b).addComponent(jLabels1a)
																)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addGroup(layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//														.addComponent(jLabels2b).addComponent(jLabels2a)
														)
												.addGap(3, 3, 3)
												.addGroup(layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//														.addComponent(jLabels3a).addComponent(jLabels3b)
														)))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(logNameLabel).addComponent(jScrollPane2,
												javax.swing.GroupLayout.PREFERRED_SIZE, 333,
												javax.swing.GroupLayout.PREFERRED_SIZE))))
				.addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap().addComponent(controlPanelLabel)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(comPortSelectLabel).addComponent(logNameLabel))
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
						.addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
						.addGroup(layout.createSequentialGroup().addGroup(layout
								.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(cboxPorts, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(btnConnect).addComponent(btnDisconnect))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//								.addComponent(jLabel2)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//										.addComponent(jLabel3)
										.addComponent(sensorNumberLabel))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(layout.createSequentialGroup()
														.addComponent(btnShowSensorSelectorPane)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//												.addComponent(jLabels4a)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(btnDebug)).addGroup(
														layout.createSequentialGroup().addComponent(btnShowVisualGui)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//																.addComponent(jLabels4b)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(btnShowDataGui)))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//								.addComponent(jLabel6)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(
										layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(layout.createSequentialGroup()
//														.addComponent(jLabels3b)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//														.addComponent(jLabels3a)
														)
												.addGroup(layout.createSequentialGroup()
//														.addComponent(jLabels1a)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//														.addComponent(jLabels1b)
														)
												.addGroup(layout.createSequentialGroup()
//														.addComponent(jLabels2a)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//														.addComponent(jLabels2b)
														))))
				.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void performSensorSelectorGUI(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnLeftAccelActionPerformed
		if (!sensorSelector.isVisible()) {
			btnShowSensorSelectorPane.setEnabled(false);
			sensorSelector.setVisible(true);
			sensorSelector.pack();
		}
	}

	private void performDebugBtn(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnLeftDecelActionPerformed
		System.out.println("Sensor selector visible: " + sensorSelector.isVisible() + "\ndatagui visibile: "
				+ datagui.isVisible() + "\nVisual gui visible: " + visualgui.isVisible());
	}// GEN-LAST:event_btnLeftDecelActionPerformed

	private void performTogVisualGUI(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnRightAccelActionPerformed
		if (!visualgui.isVisible()) {
			btnShowVisualGui.setEnabled(false);
			visualgui.setVisible(true);
			visualgui.pack();
		}
	}

	private void performTogDataGUI(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnRightDecelActionPerformed
		if (!datagui.isVisible()) {
			btnShowDataGui.setEnabled(false);
			datagui.setVisible(true);
			datagui.pack();
		}
	}

	private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnConnectActionPerformed
		if (!communicator.isConsuming) {
			communicator.connect();
			if (communicator.getConnected() == true) {
				if (communicator.initIOStream() == true) {
					communicator.setReadingFlag(true);
					communicator.consumerThread.start();
					guiUpdater.start();
					communicator.initListener();
				}
			}
		} else {
			communicator.connect();
			if (communicator.getConnected() == true) {

				if (communicator.initIOStream() == true) {

					communicator.initListener();
					wake();
				}
			}
			pack();
		}
	}

	protected void wake() {
		synchronized (communicator.consumerThread) {
			communicator.consumerThread.notify();
		}
		synchronized (guiUpdater) {
			guiUpdater.notify();
		}
	}

	private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt) throws InterruptedException {// GEN-FIRST:event_btnDisconnectActionPerformed
		communicator.disconnect();
		if (!communicator.isAsleep) {
			String logText = "Hardware has gone to sleep.";
			txtLog.setForeground(Color.BLACK);
			txtLog.append(logText + "\n");
		}
		communicator.halt = true;
	}

	@Override
	public void run() {
		// Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
		while (communicator.isConsuming) {
			// System.out.println("i'm cons in gui");
			if (communicator.halt) // NOT DEBUG
				try {
					synchronized (guiUpdater) {
						guiUpdater.wait();
					}
				} catch (InterruptedException e1) {
					e1.printStackTrace();
				}
			if (!communicator.isAsleep) { // DEBUG

				for (int i = 0; i < 4; i++) {
					for (int j = 0; j < 2; j++) {
						int tempInt = communicator.getCurrentSideSensor(i, j);
						String tempString = new String();
						if (tempInt < 10) {
							tempString = "00";
						} else if (tempInt < 100) {
							tempString = "0";
						}

						SensorOutputDataGUI.sideSensor[i][j].setText(tempString + tempInt);
					}
				}

				for (int i = 0; i < 10; i++) {
					for (int j = 0; j < 16; j++) {
						SensorOutputDataGUI.padCellData[i][j].setText("" + communicator.getCurrentXYZ(i, j));
					}
				}
				// try {
				// Thread.sleep(100);
				// } catch (InterruptedException e) {
				// e.printStackTrace();
				// }

				// NOT DEBUG
				// s1
				// jLabels1a.setText(Integer.toString(communicator.getCurrentSideSensor(0,
				// 0)));
				// jLabels1b.setText(Integer.toString(communicator.getCurrentSideSensor(0,
				// 1)));
				// // s2
				// jLabels2a.setText(Integer.toString(communicator.getCurrentSideSensor(1,
				// 0)));
				// jLabels2b.setText(Integer.toString(communicator.getCurrentSideSensor(1,
				// 1)));
				// // s3
				// jLabels3a.setText(Integer.toString(communicator.getCurrentSideSensor(2,
				// 0)));
				// jLabels3b.setText(Integer.toString(communicator.getCurrentSideSensor(2,
				// 1)));
				// // s4
				// jLabels4a.setText(Integer.toString(communicator.getCurrentSideSensor(3,
				// 0)));
				// jLabels4b.setText(Integer.toString(communicator.getCurrentSideSensor(3,
				// 1)));
				// // XYZ
				// if (communicator.inXYZ) { // if we're in the xyz
				// for (int i = 0; i < communicator.modelState.ROWS; i++) {
				// for (int j = 0; j < communicator.modelState.COLS; j++) {
				// int temp = communicator.getCurrentXYZ(i, j);
				// // if (temp != 0)
				//
				// }
				// }
				// }

				// NOT DEBUG

				// DEBUGGER ONLY I.E. TO SYSOUT

				// for (int i = 0; i < communicator.activeSensors.size(); i++) {
				// System.out.println(communicator.activeSensors.get(i).toString());
				// }
				// try {
				// Thread.sleep(500);
				// } catch (InterruptedException e) {
				// // TODO Auto-generated catch block
				// e.printStackTrace();
				// }

				// s1
				// if (communicator.inSensorQuery(SensorState.IN_STRIP_1))
				// System.out.println("s1: " +
				// communicator.getCurrentSideSensor(0, 0) + " "
				// + communicator.getCurrentSideSensor(0, 1));
				// // s2
				// if (communicator.inSensorQuery(SensorState.IN_STRIP_2))
				// System.out.println(" s2: " +
				// communicator.getCurrentSideSensor(1, 0) + " "
				// + communicator.getCurrentSideSensor(1, 1));
				// // s3
				// if (communicator.inSensorQuery(SensorState.IN_STRIP_3))
				// System.out.println(" s3: " +
				// communicator.getCurrentSideSensor(2, 0) + " "
				// + communicator.getCurrentSideSensor(2, 1));
				// // s4
				// if (communicator.inSensorQuery(SensorState.IN_STRIP_4))
				// System.out.println(" s4: " +
				// communicator.getCurrentSideSensor(3, 0) + " "
				// + communicator.getCurrentSideSensor(3, 1));
				// // XYZ
				// if (communicator.inSensorQuery(SensorState.IN_XYZ)) { // if
				// // we're
				// // in
				// // the
				// // xyz
				// for (int i = 0; i < Model.ROWS; i++) {
				// for (int j = 0; j < Model.COLS; j++) {
				// int temp = communicator.getCurrentXYZ(i, j);
				// if (temp < 10) {
				// System.out.print(" ");
				// } else if (temp < 100) {
				// System.out.print(" ");
				// }
				// System.out.print(temp + " ");
				// }
				// System.out.println();
				// }
				// }
				// System.out.println();

				// DEBUG end

			}
		}
	}
}
